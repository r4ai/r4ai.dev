---
import type { ReactNode } from "react"
import Icon from "../../Icon.astro"
import { CodeBlock as CodeBlockComponent } from "./CodeBlock"
import { camelCase } from "scule"
import Iconify from "@iconify/iconify/dist/iconify.js"
import { skillIcons } from "@/lib/langs"
import { Npm2Yarn } from "./Npm2Yarn"
import { Mermaid } from "./Mermaid"
import { fromHtml } from "hast-util-from-html"
import { toText } from "hast-util-to-text"

export type CodeBlockProps = {
  code: string
  title: string
  lang: string
  range: number[]
  showLineNumbers: boolean
  startLine: number
  diff?: boolean
  diffIndentSize?: number
  npm2yarn?: boolean
  icon: ReactNode
  footer?: ReactNode
}

type Props = CodeBlockProps
const props = Object.entries(Astro.props)
  .map(([key, value]) => [key.replace("data-", ""), value])
  .map(([key, value]) => {
    if (key === "tabindex") return ["tabIndex", value]
    return [camelCase(key.replace("data", "")), value]
  })
  .reduce(
    (acc, [key, value]) => ({ ...acc, [key]: value }),
    {}
  ) as CodeBlockProps
props.code = props.diffIndentSize
  ? props.code
      ?.toString()
      .split("\n")
      .map((line) => line.slice(Number(props.diffIndentSize)))
      .join("\n")
  : props.code

const transformLang = (lang: string) => {
  const icons = skillIcons(true)
  return icons[lang as keyof typeof icons] ?? lang
}

const skillIcon = async (lang: string) => {
  const iconName = `skill-icons:${transformLang(lang)}`
  try {
    await Iconify.loadIcon(iconName)
    if (Iconify.iconExists(iconName)) {
      return iconName
    } else {
      return "radix-icons:file"
    }
  } catch {
    return "radix-icons:file"
  }
}
const iconName = await skillIcon(props.lang)

const codeHtml = await Astro.slots.render("default")
const codeHast = fromHtml(codeHtml)
const code = toText(codeHast, { whitespace: "pre" })
---

{
  props.npm2yarn ? (
    <Npm2Yarn {...props} {code} client:visible>
      <Icon
        icon={iconName}
        class="h-4 w-4 brightness-90 contrast-75 filter"
        slot="icon"
      />
    </Npm2Yarn>
  ) : props.lang === "mermaid" ? (
    <Mermaid client:load code={code} />
  ) : (
    <CodeBlockComponent {...props} {code} client:visible>
      <Icon
        icon={iconName}
        class="h-4 w-4 brightness-90 contrast-75 filter"
        slot="icon"
      />
      <slot />
    </CodeBlockComponent>
  )
}
