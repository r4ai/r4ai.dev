---
import {
  extract,
  hasProvider,
  type OembedData,
} from "@extractus/oembed-extractor"
import { randomUUID } from "crypto"
import { Switch, Case, Default } from "@/components/utils/switch"
import JSFiddle from "./JSFiddle.astro"
import StackBlitz from "./StackBlitz.astro"
import { Twitter } from "./Twitter"
import Gist from "./Gist.astro"
import type { HTMLAttributes } from "astro/types"
import OGPLinkCard from "./LinkCard.astro"

const hasHtml = (oembed: OembedData): oembed is OembedData & { html: string } =>
  oembed !== undefined && "html" in oembed && typeof oembed.html === "string"

const isTwitter = (url: URL) =>
  url.hostname.match(/twitter\.com$/) || url.hostname.match(/x\.com$/)

export type LinkCardProps = HTMLAttributes<"a"> & {
  oembed?: OembedData
}
type Props = LinkCardProps
let { oembed, ...props } = Astro.props

const url = new URL(props.href ?? "")

let oembedId: string | undefined = undefined

const getOembed = async (url: URL) => {
  if (isTwitter(url)) {
    return undefined
  }
  if (hasProvider(url.href)) {
    const oembed = await extract(url.href)
    if (hasHtml(oembed)) {
      oembedId = randomUUID()
      oembed.html = oembed.html.replace(
        /<blockquote/g,
        `<blockquote data-id="${oembedId}"`
      )
    }
    return oembed
  }
  return undefined
}
oembed = await getOembed(url)
---

<style is:global>
  .twitter-tweet {
    margin: 0 auto !important;
  }

  div[data-oembed] > * {
    margin: 0 auto !important;
  }
  div[data-oembed] > div {
    width: fit-content; /* SlideShare */
  }
</style>

{
  oembed && hasHtml(oembed) ? (
    <div data-oembed set:html={oembed.html} />
  ) : (
    <Switch value={url.hostname}>
      <Case slot="jsfiddle.net">
        <JSFiddle url={url} />
      </Case>
      <Case slot="stackblitz.com">
        <StackBlitz url={url} />
      </Case>
      <Case slot="twitter.com">
        <div class="mx-auto w-full sm:w-[80%]">
          <Twitter url={url} client:visible />
        </div>
      </Case>
      <Case slot="gist.github.com">
        <Gist url={url} />
      </Case>
      <Default>
        {/* eslint-disable-next-line */}
        <OGPLinkCard {...(props as any)} href={url.href} />
      </Default>
    </Switch>
  )
}

{
  oembedId && (
    <script is:inline define:vars={{ id: oembedId }}>
      const oembed = document.querySelector(`[data-id="${id}"]`)
      oembed?.setAttribute("data-theme", resolvedTheme)
      oembed?.setAttribute("data-embed-theme", resolvedTheme)
    </script>
  )
}
